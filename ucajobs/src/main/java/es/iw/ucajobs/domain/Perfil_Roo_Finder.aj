// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.iw.ucajobs.domain;

import es.iw.ucajobs.domain.Experiencia;
import es.iw.ucajobs.domain.Perfil;
import es.iw.ucajobs.domain.Titulo;
import es.iw.ucajobs.domain.Trabajo;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Perfil_Roo_Finder {
    
    public static Long Perfil.countFindPerfilsByExperiencia(Set<Experiencia> experiencia) {
        if (experiencia == null) throw new IllegalArgumentException("The experiencia argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Perfil AS o WHERE");
        for (int i = 0; i < experiencia.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :experiencia_item").append(i).append(" MEMBER OF o.experiencia");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int experienciaIndex = 0;
        for (Experiencia _experiencia: experiencia) {
            q.setParameter("experiencia_item" + experienciaIndex++, _experiencia);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static Long Perfil.countFindPerfilsByTitulos(Set<Titulo> titulos) {
        if (titulos == null) throw new IllegalArgumentException("The titulos argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Perfil AS o WHERE");
        for (int i = 0; i < titulos.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :titulos_item").append(i).append(" MEMBER OF o.titulos");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int titulosIndex = 0;
        for (Titulo _titulo: titulos) {
            q.setParameter("titulos_item" + titulosIndex++, _titulo);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static Long Perfil.countFindPerfilsByTrabajos(Set<Trabajo> trabajos) {
        if (trabajos == null) throw new IllegalArgumentException("The trabajos argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Perfil AS o WHERE");
        for (int i = 0; i < trabajos.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :trabajos_item").append(i).append(" MEMBER OF o.trabajos");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int trabajosIndex = 0;
        for (Trabajo _trabajo: trabajos) {
            q.setParameter("trabajos_item" + trabajosIndex++, _trabajo);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Perfil> Perfil.findPerfilsByExperiencia(Set<Experiencia> experiencia) {
        if (experiencia == null) throw new IllegalArgumentException("The experiencia argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Perfil AS o WHERE");
        for (int i = 0; i < experiencia.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :experiencia_item").append(i).append(" MEMBER OF o.experiencia");
        }
        TypedQuery<Perfil> q = em.createQuery(queryBuilder.toString(), Perfil.class);
        int experienciaIndex = 0;
        for (Experiencia _experiencia: experiencia) {
            q.setParameter("experiencia_item" + experienciaIndex++, _experiencia);
        }
        return q;
    }
    
    public static TypedQuery<Perfil> Perfil.findPerfilsByExperiencia(Set<Experiencia> experiencia, String sortFieldName, String sortOrder) {
        if (experiencia == null) throw new IllegalArgumentException("The experiencia argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Perfil AS o WHERE");
        for (int i = 0; i < experiencia.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :experiencia_item").append(i).append(" MEMBER OF o.experiencia");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Perfil> q = em.createQuery(queryBuilder.toString(), Perfil.class);
        int experienciaIndex = 0;
        for (Experiencia _experiencia: experiencia) {
            q.setParameter("experiencia_item" + experienciaIndex++, _experiencia);
        }
        return q;
    }
    
    public static TypedQuery<Perfil> Perfil.findPerfilsByTitulos(Set<Titulo> titulos) {
        if (titulos == null) throw new IllegalArgumentException("The titulos argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Perfil AS o WHERE");
        for (int i = 0; i < titulos.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :titulos_item").append(i).append(" MEMBER OF o.titulos");
        }
        TypedQuery<Perfil> q = em.createQuery(queryBuilder.toString(), Perfil.class);
        int titulosIndex = 0;
        for (Titulo _titulo: titulos) {
            q.setParameter("titulos_item" + titulosIndex++, _titulo);
        }
        return q;
    }
    
    public static TypedQuery<Perfil> Perfil.findPerfilsByTitulos(Set<Titulo> titulos, String sortFieldName, String sortOrder) {
        if (titulos == null) throw new IllegalArgumentException("The titulos argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Perfil AS o WHERE");
        for (int i = 0; i < titulos.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :titulos_item").append(i).append(" MEMBER OF o.titulos");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Perfil> q = em.createQuery(queryBuilder.toString(), Perfil.class);
        int titulosIndex = 0;
        for (Titulo _titulo: titulos) {
            q.setParameter("titulos_item" + titulosIndex++, _titulo);
        }
        return q;
    }
    
    public static TypedQuery<Perfil> Perfil.findPerfilsByTrabajos(Set<Trabajo> trabajos) {
        if (trabajos == null) throw new IllegalArgumentException("The trabajos argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Perfil AS o WHERE");
        for (int i = 0; i < trabajos.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :trabajos_item").append(i).append(" MEMBER OF o.trabajos");
        }
        TypedQuery<Perfil> q = em.createQuery(queryBuilder.toString(), Perfil.class);
        int trabajosIndex = 0;
        for (Trabajo _trabajo: trabajos) {
            q.setParameter("trabajos_item" + trabajosIndex++, _trabajo);
        }
        return q;
    }
    
    public static TypedQuery<Perfil> Perfil.findPerfilsByTrabajos(Set<Trabajo> trabajos, String sortFieldName, String sortOrder) {
        if (trabajos == null) throw new IllegalArgumentException("The trabajos argument is required");
        EntityManager em = Perfil.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Perfil AS o WHERE");
        for (int i = 0; i < trabajos.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :trabajos_item").append(i).append(" MEMBER OF o.trabajos");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Perfil> q = em.createQuery(queryBuilder.toString(), Perfil.class);
        int trabajosIndex = 0;
        for (Trabajo _trabajo: trabajos) {
            q.setParameter("trabajos_item" + trabajosIndex++, _trabajo);
        }
        return q;
    }
    
}
