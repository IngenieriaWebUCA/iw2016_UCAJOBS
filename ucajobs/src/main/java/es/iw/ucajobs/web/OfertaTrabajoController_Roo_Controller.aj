// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.iw.ucajobs.web;

import es.iw.ucajobs.domain.Ciudad;
import es.iw.ucajobs.domain.Inscripcion;
import es.iw.ucajobs.domain.OfertaTrabajo;
import es.iw.ucajobs.domain.Trabajo;
import es.iw.ucajobs.reference.TipoContrato;
import es.iw.ucajobs.web.OfertaTrabajoController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect OfertaTrabajoController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String OfertaTrabajoController.create(@Valid OfertaTrabajo ofertaTrabajo, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ofertaTrabajo);
            return "ofertatrabajoes/create";
        }
        uiModel.asMap().clear();
        ofertaTrabajo.persist();
        return "redirect:/ofertatrabajoes/" + encodeUrlPathSegment(ofertaTrabajo.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String OfertaTrabajoController.createForm(Model uiModel) {
        populateEditForm(uiModel, new OfertaTrabajo());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Trabajo.countTrabajoes() == 0) {
            dependencies.add(new String[] { "nombre_puesto", "trabajoes" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "ofertatrabajoes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String OfertaTrabajoController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("ofertatrabajo", OfertaTrabajo.findOfertaTrabajo(id));
        uiModel.addAttribute("itemId", id);
        return "ofertatrabajoes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String OfertaTrabajoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) OfertaTrabajo.countOfertaTrabajoes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findAllOfertaTrabajoes(sortFieldName, sortOrder));
        }
        return "ofertatrabajoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String OfertaTrabajoController.update(@Valid OfertaTrabajo ofertaTrabajo, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ofertaTrabajo);
            return "ofertatrabajoes/update";
        }
        uiModel.asMap().clear();
        ofertaTrabajo.merge();
        return "redirect:/ofertatrabajoes/" + encodeUrlPathSegment(ofertaTrabajo.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String OfertaTrabajoController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, OfertaTrabajo.findOfertaTrabajo(id));
        return "ofertatrabajoes/update";
    }
    
    void OfertaTrabajoController.populateEditForm(Model uiModel, OfertaTrabajo ofertaTrabajo) {
        uiModel.addAttribute("ofertaTrabajo", ofertaTrabajo);
        uiModel.addAttribute("ciudads", Ciudad.findAllCiudads());
        uiModel.addAttribute("inscripcions", Inscripcion.findAllInscripcions());
        uiModel.addAttribute("trabajoes", Trabajo.findAllTrabajoes());
        uiModel.addAttribute("tipocontratoes", Arrays.asList(TipoContrato.values()));
    }
    
    String OfertaTrabajoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
