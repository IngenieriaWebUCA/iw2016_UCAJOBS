// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.iw.ucajobs.web;

import es.iw.ucajobs.domain.Ciudad;
import es.iw.ucajobs.domain.Inscripcion;
import es.iw.ucajobs.domain.OfertaTrabajo;
import es.iw.ucajobs.domain.Trabajo;
import es.iw.ucajobs.web.OfertaTrabajoController;
import java.util.Set;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect OfertaTrabajoController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByInscritos", "form" }, method = RequestMethod.GET)
    public String OfertaTrabajoController.findOfertaTrabajoesByInscritosForm(Model uiModel) {
        uiModel.addAttribute("inscripcions", Inscripcion.findAllInscripcions());
        return "ofertatrabajoes/findOfertaTrabajoesByInscritos";
    }
    
    @RequestMapping(params = "find=ByInscritos", method = RequestMethod.GET)
    public String OfertaTrabajoController.findOfertaTrabajoesByInscritos(@RequestParam("inscritos") Set<Inscripcion> inscritos, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoesByInscritos(inscritos, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) OfertaTrabajo.countFindOfertaTrabajoesByInscritos(inscritos) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoesByInscritos(inscritos, sortFieldName, sortOrder).getResultList());
        }
        return "ofertatrabajoes/list";
    }
    
    @RequestMapping(params = { "find=ByLocalizacion", "form" }, method = RequestMethod.GET)
    public String OfertaTrabajoController.findOfertaTrabajoesByLocalizacionForm(Model uiModel) {
        uiModel.addAttribute("ciudads", Ciudad.findAllCiudads());
        return "ofertatrabajoes/findOfertaTrabajoesByLocalizacion";
    }
    
    @RequestMapping(params = "find=ByLocalizacion", method = RequestMethod.GET)
    public String OfertaTrabajoController.findOfertaTrabajoesByLocalizacion(@RequestParam("localizacion") Ciudad localizacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoesByLocalizacion(localizacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) OfertaTrabajo.countFindOfertaTrabajoesByLocalizacion(localizacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoesByLocalizacion(localizacion, sortFieldName, sortOrder).getResultList());
        }
        return "ofertatrabajoes/list";
    }
    
    @RequestMapping(params = { "find=ByNombre_puesto", "form" }, method = RequestMethod.GET)
    public String OfertaTrabajoController.findOfertaTrabajoesByNombre_puestoForm(Model uiModel) {
        uiModel.addAttribute("trabajoes", Trabajo.findAllTrabajoes());
        return "ofertatrabajoes/findOfertaTrabajoesByNombre_puesto";
    }
    
    @RequestMapping(params = "find=ByNombre_puesto", method = RequestMethod.GET)
    public String OfertaTrabajoController.findOfertaTrabajoesByNombre_puesto(@RequestParam("nombre_puesto") Trabajo nombre_puesto, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoesByNombre_puesto(nombre_puesto, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) OfertaTrabajo.countFindOfertaTrabajoesByNombre_puesto(nombre_puesto) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoesByNombre_puesto(nombre_puesto, sortFieldName, sortOrder).getResultList());
        }
        return "ofertatrabajoes/list";
    }
    
    @RequestMapping(params = { "find=BySalario", "form" }, method = RequestMethod.GET)
    public String OfertaTrabajoController.findOfertaTrabajoesBySalarioForm(Model uiModel) {
        return "ofertatrabajoes/findOfertaTrabajoesBySalario";
    }
    
    @RequestMapping(params = "find=BySalario", method = RequestMethod.GET)
    public String OfertaTrabajoController.findOfertaTrabajoesBySalario(@RequestParam("salario") double salario, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoesBySalario(salario, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) OfertaTrabajo.countFindOfertaTrabajoesBySalario(salario) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ofertatrabajoes", OfertaTrabajo.findOfertaTrabajoesBySalario(salario, sortFieldName, sortOrder).getResultList());
        }
        return "ofertatrabajoes/list";
    }
    
}
